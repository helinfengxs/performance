# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'performance.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import threading
import time
from PyQt5.QtGui import  QIntValidator,  QRegExpValidator
import controller
import globalParmas
from PyQt5 import QtCore,  QtWidgets,Qt
from PyQt5.QtCore import QDateTime, QRegExp
from PyQt5.QtWidgets import QApplication, QWidget
from threading import Timer
import telnetsw
import Util

delayedThread = []

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(526, 346)
        #关闭窗口的最大化按钮
        Form.setFixedSize(Form.width(),Form.height())
        #关闭窗口右上角X按钮，保留最小化
        Form.setWindowFlags(Qt.Qt.Window | Qt.Qt.WindowMinimizeButtonHint)
        #获取当前时间对象
        now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        #文本限制数字英文
        regx = QRegExp("[a-zA-Z0-9]+$")
        validator=QRegExpValidator(regx)
        #文本限制ip地址
        regx1 = QRegExp("((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))")
        validator1 = QRegExpValidator(regx1)
        #文本限制数字英文下划线
        regx2 = QRegExp("^[A-Za-z0-9_]+$")
        validator2 = QRegExpValidator(regx2)
        #文本显示数字$符号
        regx3 = QRegExp("^[0-9&]+$")
        validator3 = QRegExpValidator(regx3)
        #英文字母特殊符号
        regx4 = QRegExp("^[\da-zA-Z!@#$%^&*.+-=/]*$")
        validator4 = QRegExpValidator(regx4)
        self.startTimeEdit = QtWidgets.QDateTimeEdit(Form)
        self.startTimeEdit.setDateTime(QDateTime.fromString(now_time, 'yyyy-MM-dd hh:mm:ss'))
        self.startTimeEdit.setGeometry(QtCore.QRect(280, 200, 131, 31))
        self.startTimeEdit.setObjectName("startTimeEdit")
        self.startTime = QtWidgets.QLabel(Form)
        self.startTime.setGeometry(QtCore.QRect(200, 200, 71, 31))
        self.startTime.setObjectName("startTime")

        self.countTime = QtWidgets.QLabel(Form)
        self.countTime.setGeometry(QtCore.QRect(20, 200, 91, 31))
        self.countTime.setObjectName("countTime")
        self.type = QtWidgets.QLabel(Form)
        self.type.setGeometry(QtCore.QRect(20, 250, 100, 31))
        self.type.setObjectName("type")


        self.deviceName = QtWidgets.QLabel(Form)
        self.deviceName.setGeometry(QtCore.QRect(20, 60, 71, 31))
        self.deviceName.setObjectName("deviceName")
        self.choseDevice = QtWidgets.QComboBox(Form)
        self.choseDevice.setEditable(True)
        self.choseDevice.setGeometry(QtCore.QRect(110, 60, 131, 31))
        self.choseDevice.setObjectName("choseDevice")
        self.choseDevice.addItem("")
        self.choseDevice.setItemText(0, "")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.addItem("")
        self.choseDevice.setValidator(validator2)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(220, 60, 54, 12))
        self.label.setText("")
        self.label.setObjectName("label")
        self.suRootPass = QtWidgets.QLabel(Form)
        self.suRootPass.setGeometry(QtCore.QRect(260, 60, 71, 31))
        self.suRootPass.setObjectName("suRootPass")


        self.suRootPassEdit = QtWidgets.QLineEdit(Form)
        self.suRootPassEdit.setGeometry(QtCore.QRect(360, 60, 131, 31))
        self.suRootPassEdit.setObjectName("suRootPassEdit")

        self.suRootPassEdit.setValidator(validator4)

        self.countSpinBox = QtWidgets.QSpinBox(Form)
        self.countSpinBox.setGeometry(QtCore.QRect(110,200,51,31))
        self.countSpinBox.setObjectName("countSpinBox")
        self.tnlentAccountEdit = QtWidgets.QLineEdit(Form)
        self.tnlentAccountEdit.setGeometry(QtCore.QRect(110, 110, 131, 31))
        self.tnlentAccountEdit.setObjectName("tnlentAccountEdit")
        self.tnlentAccountEdit.setValidator(validator4)
        self.telnetPassEdit = QtWidgets.QLineEdit(Form)
        self.telnetPassEdit.setGeometry(QtCore.QRect(360, 110, 131, 31))
        self.telnetPassEdit.setObjectName("telnetPassEdit")
        self.telnetPassEdit.setValidator(validator4)
        self.telnetAccount = QtWidgets.QLabel(Form)
        self.telnetAccount.setGeometry(QtCore.QRect(20, 110, 71, 31))
        self.telnetAccount.setObjectName("telnetAccount")


        self.telnetPass = QtWidgets.QLabel(Form)
        self.telnetPass.setGeometry(QtCore.QRect(270, 110, 71, 31))
        self.telnetPass.setObjectName("telnetPass")
        self.downFileEdit = QtWidgets.QLineEdit(Form)
        self.downFileEdit.setGeometry(QtCore.QRect(280, 160, 221, 31))
        self.downFileEdit.setObjectName("downFileEdit")
        self.downFileEdit.setValidator(validator3)
        self.downCountFileLable = QtWidgets.QLabel(Form)
        self.downCountFileLable.setGeometry(QtCore.QRect(170, 160, 91, 31))
        self.downCountFileLable.setObjectName("downCountFileLable")
        self.startButton = QtWidgets.QPushButton(Form)
        self.startButton.setGeometry(QtCore.QRect(10, 290, 101, 41))
        self.startButton.setObjectName("startButton")
        self.quittButton = QtWidgets.QPushButton(Form)
        self.quittButton.setGeometry(QtCore.QRect(410, 290, 101, 41))
        self.quittButton.setObjectName("quittButton")
        # self.countDLcdNumber = QtWidgets.QLCDNumber(Form)
        # self.countDLcdNumber.setGeometry(QtCore.QRect(210, 290, 101, 41))
        # self.countDLcdNumber.setObjectName("countDLcdNumber")
        self.countDown = QtWidgets.QLabel(Form)
        self.countDown.setGeometry(QtCore.QRect(160, 290, 81, 41))
        self.countDown.setObjectName("countDown")
        self.ipLable = QtWidgets.QLabel(Form)
        self.ipLable.setGeometry(QtCore.QRect(20, 10, 81, 31))
        self.ipLable.setObjectName("ipLable")
        self.ipEdit = QtWidgets.QLineEdit(Form)
        self.ipEdit.setText("192.168.1.1")
        self.ipEdit.setGeometry(QtCore.QRect(110, 10, 131, 31))
        self.ipEdit.setObjectName("ipEdit")
        self.ipEdit.setValidator(validator1)
        self.pingLable = QtWidgets.QLabel(Form)
        self.pingLable.setGeometry(QtCore.QRect(250, 10, 91, 31))
        self.pingLable.setObjectName("pingLable")
        self.pingEdit = QtWidgets.QLineEdit(Form)
        self.pingEdit.setValidator(QIntValidator(0,9999))
        self.pingEdit.setText("10")
        self.pingEdit.setGeometry(QtCore.QRect(360, 10, 131, 31))
        self.pingEdit.setObjectName("pingEdit")
        self.runNumberBox = QtWidgets.QSpinBox(Form)
        self.runNumberBox.setGeometry(QtCore.QRect(110, 160, 51, 31))
        self.runNumberBox.setObjectName("runNumberBox")
        self.runNuberLabel = QtWidgets.QLabel(Form)
        self.runNuberLabel.setGeometry(QtCore.QRect(20, 160, 71, 31))
        self.runNuberLabel.setObjectName("runNuberLabel")

        self.typeBox = QtWidgets.QComboBox(Form)
        self.typeBox.setGeometry(QtCore.QRect(110, 250, 100, 31))
        self.typeBox.setObjectName("runNumberBox")
        self.typeBox.setItemText(0, "教育插件")
        self.typeBox.addItem("")
        self.typeBox.addItem("")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        Form.show()
        sys.exit(app.exec_())
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "性能测试"))
        self.startTime.setText(_translate("Form", "开始时间："))
        self.countTime.setText(_translate("Form", "每次时长(分)："))
        self.deviceName.setText(_translate("Form", "设备名称："))
        self.type.setText(_translate("Form", "插件类型："))

        self.choseDevice.setItemText(1, _translate("Form", "GS3101"))
        self.choseDevice.setItemText(2, _translate("Form", "HG6201M"))
        self.choseDevice.setItemText(3, _translate("Form", "HG6543C4"))
        self.choseDevice.setItemText(4, _translate("Form", "HG6145D"))
        self.choseDevice.setItemText(5, _translate("Form", "PT939G"))
        self.choseDevice.setItemText(6, _translate("Form", "H2-2"))
        self.choseDevice.setItemText(7, _translate("Form", "H2-3"))
        self.choseDevice.setItemText(8, _translate("Form", "H1S-3"))
        self.choseDevice.setItemText(9, _translate("Form", "H1S-2"))
        self.choseDevice.setItemText(10, _translate("Form", "G-140W-MH"))
        self.choseDevice.setItemText(11, _translate("Form", "G-140W-C"))
        self.choseDevice.setItemText(12, _translate("Form", "GM220-S"))
        self.choseDevice.setItemText(13, _translate("Form", "GM219-S"))
        self.choseDevice.setItemText(14, _translate("Form", "GM620"))
        self.choseDevice.setItemText(15, _translate("Form", "AN1202L"))
        self.choseDevice.setItemText(16, _translate("Form", "AN1201L"))
        self.choseDevice.setItemText(17, _translate("Form", "AX1803"))

        self.typeBox.setItemText(0,_translate("Form", "教育插件"))
        self.typeBox.setItemText(1,_translate("Form", "游戏插件"))

        self.suRootPass.setText(_translate("Form", "su root密码："))
        self.telnetAccount.setText(_translate("Form", "telnet账号："))
        self.telnetPass.setText(_translate("Form", "telnet密码："))
        self.downCountFileLable.setText(_translate("Form", "下载数(&分割)："))
        self.startButton.setText(_translate("Form", "开始"))
        self.quittButton.setText(_translate("Form", "退出"))
        self.ipLable.setText(_translate("Form", "ip："))
        self.pingLable.setText(_translate("Form", "ping百度包数量："))
        self.runNuberLabel.setText(_translate("Form", "执行次数："))
        t = threading.Thread(target=self.monitor)
        t.setDaemon(True)
        t.start()

        # 退出按钮点击事件
        self.quittButton.clicked.connect(lambda: self.closeApp(Form))
        # 设备下拉框选择事件
        self.choseDevice.currentIndexChanged.connect(
                            lambda: self.WrittingNotOfOther(self.choseDevice.currentText()))
        #开始按钮事件
        self.startButton.clicked.connect(lambda: self.startApp(Form))

    #关闭程序
    def closeApp(self,obj):
        globalParmas.EditGlobalParmas().setpingStaus(2)
        globalParmas.EditGlobalParmas().setRunStatus(2)
        obj.close()
    #开始按钮点击事件
    def startApp(self,obj):
        ip = self.ipEdit.text().strip()
        ping = self.pingEdit.text().strip()
        deviceName = self.choseDevice.currentText().strip()
        if "-" in deviceName:
            deviceName = deviceName.replace("-","_")
        suRoot = self.suRootPassEdit.text().strip()
        teneltAccount = self.tnlentAccountEdit.text().strip()
        teneltPass = self.telnetPassEdit.text().strip()
        runCountNum = int(self.runNumberBox.text())
        downFileCount = self.downFileEdit.text().strip()
        countTime = int(self.countSpinBox.text())*60
        starTime = self.startTimeEdit.text().strip()
        type = self.typeBox.currentText()
        if type == "教育插件":
            type = 1
        if type == "游戏插件":
            type = 2
        downFileCountList = []




        if "&" in downFileCount:
            #切割文件
            downFileCountList = self.splitDownFile(downFileCount)
        elif downFileCount != "" and "&" not in downFileCount:
            downFileCountList.append(downFileCount)

        if self.startButton.text() == "停止":
            for i in delayedThread:
                i.cancel()
            globalParmas.EditGlobalParmas().setRunStatus(2)
            globalParmas.EditGlobalParmas().setpingStaus(2)
            self.startButton.setText("开始")
        elif self.startButton.text() == "开始":
            # 校验文本框空的情况
            flag = self.checkEdit(ip, teneltAccount, teneltPass, deviceName)
            if not flag:
                return
            #校验运行次数和下载文件次数
            if len(downFileCountList) > 0:
                if runCountNum != len(downFileCountList):
                    self.child_window = Child("执行次数和下载数分割不一致")
                    self.child_window.show()
                    return
            else:
                self.child_window = Child("下载数未填写")
                self.child_window.show()
                return

            # 获取系统当前时间
            nowTime = int(time.time())
            # 脚本开始执行时间
            startScriptTime = int(time.mktime(time.strptime(starTime, "%Y/%m/%d %H:%M")))
            # 校验脚本开始时间
            runTime = startScriptTime - nowTime
            if runTime < 0:
                self.child_window = Child("开始时间小于当前时间")
                self.child_window.show()
                return
            print("%ds后开始测试"%runTime)


            data = {
                "ip":ip,
                "ping":ping,
                "deviceName":deviceName,
                "username":teneltAccount,
                "password":teneltPass,
                "suRoot":suRoot,
                "RunCount":runCountNum,
                "downFileList":downFileCountList,
                "runTime":countTime,
                "type":type,
                "fileName":"",
                "logName":"",
                "downCount":""
            }


            # 延时任务
            self.timesleep(runTime, data)
            globalParmas.EditGlobalParmas().setRunStatus(1)
            globalParmas.EditGlobalParmas().setpingStaus(1)
            for i in delayedThread:
                i.start()
            #改变按钮显示为停止
            self.startButton.setText("停止")
    # 设备下拉框选择事件,回显telnet账号密码
    def WrittingNotOfOther(self,deviceName):
       
    #设置telnet账号和密码显示方法
    def setAccountAndPassText(self,account,password):
        self.tnlentAccountEdit.setText(account)
        self.telnetPassEdit.setText(password)
    #定时器
    def timesleep(self, s, data):
        delayedThread.clear()
        t = Timer(s, self.callScript, (data,))
        delayedThread.append(t)
    #性能脚本调度执行
    def callScript(self,data):
        downList = []
        pingList = []
        telnetList = []
        runTime = data["runTime"]
        for  i in range(0,data["RunCount"]):
            nowtime = int(time.time())
            telent = telnetsw.TelnetClient()
            u = Util.Util()
            u.mkdir("data")
            data["downCount"] = int(data["downFileList"][i])
            tor = nowtime + runTime
            data["runTime"] = int(tor)
            formatTime = time.localtime(nowtime)
            numberTime = time.strftime('%Y%m%d%H%M%S', formatTime)
            logName = "data/"+numberTime+"_"+data["downFileList"][i]+".log"
            data["fileName"] ="data/"+ numberTime+"_"+data["downFileList"][i]+".xlsx"
            data["logName"] = logName

            print(data)
            if globalParmas.EditGlobalParmas().getRunStatus() == 2:
                return
            t = threading.Thread(target=controller.run,args=(data,))

            t2 = threading.Thread(target=telent.run, args=(data,))
            t3 = threading.Thread(target=u.pingBaiDu, args=(data,))  # 控制ping发送包,例 60为 60个包,,与脚本时间保持一致
            t.start()
            t2.start()
            t3.start()

            while t.is_alive() or t2.is_alive() or t3.is_alive()  :
                if globalParmas.EditGlobalParmas().getRunStatus() == 2:
                    u._async_raise(t.ident, SystemExit,data["log"])
                    u._async_raise(t2.ident, SystemExit,data["log"])
                    u._async_raise(t3.ident, SystemExit,data["log"])
                print("下载:",t.is_alive(), "telnet:",t2.is_alive(), "ping:",t3.is_alive())
                time.sleep(1)
            del data["log"]
            downList.append(t)
            pingList.append(t2)
            telnetList.append(t3)


    #监控线程
    def monitor(self):
        num = 0
        while True:
            if len(delayedThread) > 0:
                for i in delayedThread:
                    if  not i.is_alive():
                        self.startButton.setText("开始")
                        if num%5==0:
                            print("性能测试已经停止.......")
                    else:
                        if num % 5 == 0:
                            print("脚本运行中.......")
            else:
                if num % 3 == 0:
                    print("延时任务未创建.....")
            num = num +1
            time.sleep(1)
    #文本框非空校验
    def checkEdit(self,ip,teneltAccount,teneltPass,deviceName):
        flag = True
        if ip =="" :
            self.child_window = Child("ip未填写")
            self.child_window.show()
            flag = False
        if deviceName=="":
            self.child_window = Child("设备名称未填写")
            self.child_window.show()
            flag = False
        if teneltAccount == "" :
            self.child_window = Child("telnet账号未填写")
            self.child_window.show()
            flag = False
        if teneltPass == "":
            self.child_window = Child("telnet密码未填写")
            self.child_window.show()
            flag = False
        return  flag
    #&切割
    def splitDownFile(self,downFile):
        newList = []
        list = downFile.split("&")
        for i in list:
            if i != "":
                newList.append(i)
        return newList
'''
警告弹窗
'''
class Child(QWidget):
    def __init__(self, message):
        super().__init__()
        self.setWindowTitle("警告")
        self.resize(270, 150)
        self.setFixedSize(self.width(), self.height())
        _translate = QtCore.QCoreApplication.translate
        self.ipEdit = QtWidgets.QLabel(self)
        self.ipEdit.setGeometry(QtCore.QRect(30, 30, 200, 50))
        self.ipEdit.setWordWrap(True)
        self.ipEdit.setText(_translate("Form", message))
if __name__ == '__main__':
    app = QApplication(sys.argv)
    u= Ui_Form()
    u .setupUi(QWidget())
